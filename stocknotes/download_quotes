#!/usr/bin/python3

import getopt
import os
import re
import requests
import string
import sys
import time
from functools import reduce

import lib.stocks as stocks
import lib.trade as trade
import lib.configuration as configuration

"""

"""

def main():

    quote_type = getArgs()
    
    tickers=[]
    if quote_type=="notify":
        target_fname = configuration.NOTIFY_QUOTES_FILE
        for c in stocks.companies.values():
            # find all companies that have ever been bought, or companies
            # that need the price for notification
            if len(c.trades) != 0 \
                    or reduce(lambda r,n: r or n.needsPrice(), c.notifies, 0):
                tickers.append(c.ticker)
    else:
        target_fname = configuration.BUY_SELL_QUOTES_FILE
        for c in stocks.companies.values():
            if c.buy or c.sell:
                tickers.append(c.ticker)

    downloadAlphaVantageCsv(tickers,target_fname)

def getArgs():
    if len(sys.argv)==1:
        return "notify"
    validArgs = {"notify":1, "buysell":1}
    if len(sys.argv)==2 and sys.argv[1] in validArgs:
        return sys.argv[1]
    print("usage: download_quotes ( [ notify | buysell ] )")
    print("default is notify")
    sys.exit(1)

def downloadYahooCsv(tickers,target_fname):
    cmd = "wget -O %s 'http://finance.yahoo.com/d/quotes.csv?s=%s&f=sl1d1t1c1ohgv&e=.csv'" % (configuration.TEMP_FILE, "+".join(tickers))
    doCmd(cmd, 1)
    doCmd("rm "+target_fname, 0)
    doCmd("mv %s %s" % (configuration.TEMP_FILE, target_fname), 1)

dateRe = re.compile(r"^(?P<year>\d+)/(?P<month>\d+)/(?P<day>\d+)$")

# parser expects rows of
# symbole,price,date
# where date is MM/DD/YYY
# TODO: the date is historical and we could refactor this and reader code to use a sensible format
def downloadAlphaVantageCsv(tickers,target_fname):
    f = open(target_fname,"w")
    for ticker in tickers:
        (quote, date, error) = alphaVantageQuote(ticker)
        f.write(ticker+","+quote+","+date+","+error+"\n")
    f.close()

# returns the latest (quote,date,error) for the given ticker
def alphaVantageQuote(ticker):
    # TODO: for now just ignore bad json in select tickers
    if ticker in ["LIOX"]:
        return ("0.00","1970/01/01","ignoring ticker $ticker")
    j = alphaVantageGet(ticker)
    if "Error Message" in j:
        return ("0.00","1970/01/01",j["Error Message"]+" "+j["url"])
    if not ("Time Series (Daily)" in j):
        return ("0.00","1970/01/01","Bad JSON")
    times = list(j["Time Series (Daily)"].keys())
    times.sort()
    latest = times[-1]
    return (j["Time Series (Daily)"][latest]["4. close"], fixDate(latest), "")

dateRe = re.compile(r"^(?P<year>\d+)-(?P<month>\d+)-(?P<day>\d+)$")

def fixDate(s):
    result = dateRe.search(s)
    if not result:
        print("bad date format: "+s)
        sys.exit(1)
    return result.group("month")+"/"+result.group("day")+"/"+result.group("year")

# returns a json blob of crap for the given ticker
# {
#   "Meta Data": { }
#   "Time Series (Daily)": {
#     date (2017-11-01): {
#       "1. open": "84.0800",
#       "2. high": "84.5400",
#       "3. low": "83.4000",
#       "4. close": "84.1400",
#       "5. volume": "17569120"
#     }
#   }
# }
def alphaVantageGet(ticker):
    payload = {
        'function': 'TIME_SERIES_DAILY_ADJUSTED', # 2022-11-10: TIME_SERIES_DAILY now requires payment
        'symbol': ticker,
        'apikey': configuration.ALPHA_VANTAGE_ACCESS_KEY }
    retry = 10
    while True:
        time.sleep(20)
        if retry==0:
            print("error downloading quote, url: "+r.url)
            sys.exit(1)
        r = requests.get('https://www.alphavantage.co/query', params=payload)
        if r.status_code == 200:
            break
        else:
            retry = retry - 1
    ret = r.json()
    ret["url"] = r.url
    return ret

def doCmd(cmd,fail):
    input = os.popen(cmd)
    out = input.read()
    ret = input.close()
    print(out)
    print("ret",ret)
    if fail and ret is not None:
        print("error running: "+cmd)
        print(out)
        sys.exit(1)

main()
